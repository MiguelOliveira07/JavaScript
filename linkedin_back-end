
##  Primeiros Passos no Back-End com Node.js

### üîπ O que √© Node.js?

Node.js √© uma ferramenta que permite rodar **JavaScript fora do navegador**, ou seja, no **servidor**.
Com ele, d√° pra criar APIs, servidores, automa√ß√µes e at√© apps completos s√≥ com JS.

 Resumindo: √© o que permite a gente usar JavaScript no **back-end**, n√£o s√≥ no front.

---

### üîπ Para que serve o Node?

* Criar **servidores web**
* Fazer **APIs** (para enviar e receber dados)
* Trabalhar com **bancos de dados**
* Criar sistemas em tempo real, tipo chats
* Automatizar tarefas

Se voc√™ quer construir a parte do sistema que **n√£o aparece na tela**, Node.js √© um √≥timo come√ßo!

---

## üì¶ Come√ßando com `npm`

O `npm` (Node Package Manager) √© tipo uma **loja de ferramentas** para projetos em Node.
Com ele, voc√™ instala pacotes (bibliotecas) que ajudam a resolver problemas sem ter que programar tudo do zero.

Exemplo:

```bash
npm install express
```

Isso instala o **Express**, que a gente j√° vai ver.

---

## üõ†Ô∏è M√≥dulos Nativos do Node.js

O Node j√° vem com alguns "kits de ferramentas" prontos, que s√£o os **m√≥dulos nativos**:

* `http`: pra criar um servidor simples
* `fs`: pra ler e escrever arquivos
* `path`: pra mexer com caminhos de arquivos
* `os`: pra pegar informa√ß√µes do sistema

Esses m√≥dulos ajudam a fazer muita coisa sem depender de pacotes externos.

---

## ‚öôÔ∏è Frameworks do Node.js

Frameworks s√£o ferramentas que deixam o trabalho mais r√°pido e organizado.
Os 3 principais do Node s√£o:

### 1. **Express.js**

O mais famoso! Com ele, d√° pra criar rotas, lidar com requisi√ß√µes (GET, POST...), enviar respostas e montar APIs rapidinho.

### 2. **NestJS**

Mais robusto e organizado, j√° usa TypeScript e √© √≥timo pra projetos grandes. Ele segue um padr√£o mais "enterprise".

### 3. **Fastify**

Mais leve e r√°pido que o Express. Ideal pra quem quer performance sem perder a simplicidade.

---

## üîå O que √© uma API?

API √© tipo uma **ponte** entre o front-end (o que o usu√°rio v√™) e o back-end (onde os dados vivem).

Exemplo pr√°tico: quando voc√™ preenche um formul√°rio e clica em ‚ÄúEnviar‚Äù, o front faz uma **requisi√ß√£o** pra uma API, que salva ou busca algo no banco e responde.

### M√©todos mais usados:

| M√©todo | Pra qu√™ serve?             | Exemplo de rota |
| ------ | -------------------------- | --------------- |
| GET    | Buscar dados               | `/usuarios`     |
| POST   | Criar novos dados          | `/usuarios`     |
| PUT    | Atualizar dados existentes | `/usuarios/:id` |
| DELETE | Deletar dados              | `/usuarios/:id` |

---

## üßæ E o tal do JSON?

JSON (JavaScript Object Notation) √© o **formato padr√£o** pra trocar dados entre o front e o back.
√â leve, f√°cil de ler e funciona em praticamente qualquer linguagem.

Exemplo:

```json
{
  "nome": "Jo√£o",
  "idade": 20,
  "email": "joao@email.com"
}
```

Quando voc√™ manda ou recebe dados de uma API, quase sempre √© em JSON.

---

##  Resumindo tudo:

 T√≥pico        Pra que serve?                                             
 ------------  ---------------------------------------------------------- 
 Node.js       Usar JavaScript no back-end                                
 npm           Instalar bibliotecas (pacotes)                             
 M√≥dulos       Ferramentas prontas pra resolver problemas comuns          
 Express       Criar APIs e rotas de forma simples                        
 API           Comunica√ß√£o entre front e back                             
 M√©todos HTTP  Enviar (POST), buscar (GET), editar (PUT), apagar (DELETE) 
 JSON          Formato padr√£o pra mandar e receber dados                  
